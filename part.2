### 산술 연산자 사용해보기
- 산술 연산자란 우리가 알고 있는 +,-,*,/를 의미함
- SQL에서도 다른 프로그래밍 언어와 마찬가지로 산술 연산자를 사용해서 어떤 결과를 얻을 수 있음

ex)
create table practice.exam_result 
(
  name varchar(50),
  math int(10),
  english int(10),
  korean int(10)
);

insert into practice.exam_result (name, math, english, korean) values('호날두', 98, 65, 56);
insert into practice.exam_result (name, math, english, korean) values('메시', 87, 76, 87);
insert into practice.exam_result (name, math, english, korean) values('치차리토', 76, 87, 75);
insert into practice.exam_result (name, math, english, korean) values('살라', 78, 88, 55);
insert into practice.exam_result (name, math, english, korean) values('라모스', 56, 90, 89);
insert into practice.exam_result (name, math, english, korean) values('모드리치', 90, 95, 78);
insert into practice.exam_result (name, math, english, korean) values('케인', 99, 82, 83);

select * from practice.exam_result;

- column을 확인해보면, name이 있음
- 그 옆으로 math, english, korean이라는 과목명이 column명으로 되어있음
- 아래에는 사람 이름과 해당 과목들의 점수가 있음

select name, math, english, korean, math + english + korean as total from practice.exam_result;
- as total 이란 부분은 part.1에 했던 alias이다
- math + english + korean 부분을 보면 산술 연산자인 + 를 사용해서 각 시험 점수를 더한다라는 명령을 한 것이다
- 다시 말하면 각 시험 점수를 (math + english + korean)더해서 total이라는 별칭으로 SQL을 실행하라는 구문이다
- 실행결과를 보면 total이라는 column명으로 각 시험 점수가 더해져서 출력돼 있음

select name, math, english, korean, (math + english + korean)/3 as avg from practice.exam_result;
- 평균값 구하기
- 세 과목을 더한 값을 ()로 둘러싸고 3으로 나눔
- avg라고 별칭(alias)을 지정해주고 SQL을 실행하면 avg라는 이름으로 column이 생기고 평균값이 출력됨

### where절에 비교 연산자를 사용해보기
part.1에 where절에 문자열을 넣어서 데이터중 조건에 맞는 일부 row만 출력하는 것을 해보았다.
그래서 이번에는 where 절에 비교 연산자를 넣어서 출력하는 방법을 해보겠다.
비교 연산자는 <,>,= 이런 것들을 이야기한다.

위에서 실습했던 시험 점수 데이터를 계속 사용

select name, math, english, korean from practice.exam_result where korean >= 80;
- 국어 점수가 80점 이상인 사람이 누구인지 출력하는 SQL문
- where절에 korean >= 80이라는 조건을 주니 korean이 80점 이상인 메시와 라모스, 케인이 출력됨

select name, math, english, korean, from practice.exam_result where (math+english+korean)/3 >= 80;
- 세 과목의 평균점수가 80점 이상인 사람의 이름과 각 시험 점수를 출력하는 SQL이다

### 비교연산자 종류
= : 같은 조건을 검색
!=, <> : 같지 않은 조건을 검색
> : 큰 조건을 검색
>= : 크거나 같은 조건을 검색
< : 작은 조건을 검색
<= : 작거나 같은 조건을 검색
BETWEEN a AND b : a와 b 사이에 있는 값을 검색
IN(a,b,c) : a,b,c 중 어느 하나 인 것을 검색
like : 특정 패턴을 가지고 있는 조건을 검색
is Null / is Not Null : NULL 인 값이나 NULL이 아닌 값을 검색
a AND b : a,b 두 조건 모두를 만족하는 값을 검색
a OR b : a 나 b 중 하나의 조건을 만족하는 값을 검색
NOT a : a 가 아닌 모든 값을 검색


### order by 절을 사용하여 정렬해서 출력하기
데이터의 양이 많을 떄는 데이터를 어떤 기준으로 정렬하여 보는 것이 편할 때가 있다.
이럴 때 SQL에서는 order by 절을 사용한다.
order by 역시 select, from, where 등과 마찬가지로 키워드로 분류가 된다.
기본적으로 order by를 사용하게 되면 오름차순으로 정렬이 되며, 내림차순으로 정렬을 하고 싶을 때는 desc라는 옵션을 사용하게 된다.
문자의 경우 가,나,다 혹은 a,b,c 순으로 정렬이 되며, 날짜는 최근 날짜가 더 큰 값으로 인식되어 정렬된다.

select * from practice.exam_result order by math;
- 수학 점수를 기준으로 오름차순 정렬이 된다. (56, 76, 78 . . .)

select * from practice.exam_result order by math desc;
- 수학 점수가 높은 행부터 정렬(99, 98, 90 . . .)

select * from practice.exam_result order by (math+english+korean)/3 desc;
- order by 절에도 산술 연산자를 사용할 수 있음
- 평균값이 높은 학생부터 정렬하여 출력이 됨

select * from practice.exam_result order by 3;
- order by 뒤에는 column명이나 어떤 연산식을 넣을 수도 있지만 이렇게 숫자만 넣을 수도 있다.
- order by 3의 의미는 SQL이 실행한 결과의 세 번째 column(english)을 기준으로 정렬 하라는 뜻이다.
- 오름차순


### 집합 연산자 사용하기

create table practice.exam_result_2
(
  name varchar(50),
  math int(10),
  english int(10),
  korean int(10)
);

INSERT INTO practice.exam_result_2 (name, math, english, korean) VALUES ('차범근', 78, 90, 78);
INSERT INTO practice.exam_result_2 (name, math, english, korean) VALUES ('서정원', 68, 99, 68); 
INSERT INTO practice.exam_result_2 (name, math, english, korean) VALUES ('고종수', 84, 96, 98); 
INSERT INTO practice.exam_result_2 (name, math, english, korean) VALUES ('박지성', 67, 68, 75); 
INSERT INTO practice.exam_result_2 (name, math, english, korean) VALUES ('최순호', 88, 93, 68);

--- 집합 연산자의 종류 ---
UNION : 두 집합을 더해서 결과를 출력함. 중복 값을 제거하고 정렬을 수행함
UNION ALL : 두 집합을 더해서 결과를 출력함. 중복 제거와 정렬을 하지 않음
INTERSECT : 두 집합의 교집합 결과를 정렬하여 출력함
MINUS : 두 집합의 차집합 결과를 정렬하고 출력한다. SQL의 순서가 중요함
-------------------------

select * from practice.exam_result
union
select * from practice.exam_result_2;
- UNION을 이용해서 두 select 결과 (집합)을 합칠 수 있다. (호날두, 메시 . . , 케인, 차범근, 서정원 . .)

select * from practice.exam_result
union
select * from practice.exam_result;

select * from practice.exam_result
union all
select * from practice.exam_result;
- 같은 테이블을 UNION, UNION ALL로 각각 합친 코드
- 중복을 제거하는 UNION에서와 제거하지 않는 UNION ALL의 차이점이 한눈에 보임




